{"version":3,"file":"static/js/177.b457cf60.chunk.js","mappings":"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","sources":["components/AppointmentsCalendar/TimeSlot/index.jsx","components/AppointmentsCalendar/DailyToolbar/index.jsx","components/AppointmentsCalendar/WeeklyNavigation/index.jsx","components/AppointmentsCalendar/WeekSelector/index.jsx","components/AppointmentsCalendar/MonthlyNavigation/index.jsx","components/AppointmentsCalendar/MonthSelector/index.jsx","db/calendar_appointments.js","components/AppointmentsCalendar/index.jsx","constants/options.js","pages/PatientAppointments.jsx","utils/numbers.js","widgets/DoctorCalendar/index.jsx"],"sourcesContent":["// utils\nimport {cloneElement} from 'react';\nimport moment from 'moment';\nimport {addZero} from '@utils/numbers';\n\nconst TimeSlot = (props, step, day, isRender) => {\n    const differenceMs = moment() - moment(props.value)\n    const isCurrentTimeSlot = (differenceMs / (60 * 1000)) > 0 && (differenceMs / (60 * 1000)) < step;\n    let hours = new Date().getHours(),\n        minutes = new Date().getMinutes();\n    const currentTime = hours + ':' + addZero(minutes);\n\n    let timeIndicator = {}\n    let addStyle = {}\n\n    function calculateIndicatorPosition() {\n        let minutesFromProps = props.value.getMinutes(),\n            indicatorPosition;\n        switch (minutesFromProps) {\n            default:\n            case 0:\n                indicatorPosition = minutesFromProps + minutes;\n                break;\n            case 30:\n                indicatorPosition = Math.abs(minutesFromProps - minutes);\n                break;\n        }\n        return indicatorPosition;\n    }\n\n    if (isCurrentTimeSlot && isRender) {\n        timeIndicator.className = 'current-time'\n        timeIndicator.children =\n            <span className=\"time-indicator\" style={{top: `${100 / step * calculateIndicatorPosition()}%`}}>\n                <span className=\"label\">{currentTime}</span>\n            </span>\n    }\n\n    return cloneElement(\n        props.children,\n        {\n            style: {...addStyle},\n            'data-time': moment(props.value).format('HH:mm'),\n            ...timeIndicator\n        })\n}\n\nexport default TimeSlot;","const DailyToolbar = ({label}) => {\n    return (\n        <>\n            <h2>{label}</h2>\n        </>\n    )\n}\n\nexport default DailyToolbar;","// components\nimport Navigator from '@ui/Navigator';\n\n// utils\nimport moment from 'moment/moment';\n\nconst WeeklyNavigation = ({date, setter}) => {\n    const calendarWeek = moment(date).week();\n    const currentWeek = moment().week();\n\n    const handleWeekNavigation = e => {\n        if (e.currentTarget.dataset.direction === 'prev') {\n            setter(moment(date).subtract(1, 'week').startOf('week').toDate());\n        } else {\n            setter(moment(date).add(1, 'week').startOf('week').toDate());\n        }\n    }\n\n    const firstWeek = moment(date).startOf('year').week(),\n        lastWeek = moment(date).endOf('year').week();\n\n    let label;\n    if (currentWeek === calendarWeek) label = 'This week';\n    else if (currentWeek + 1 === calendarWeek) label = 'Next week';\n    else if (currentWeek - 1 === calendarWeek) label = 'Last week';\n    else label = 'Week ' + calendarWeek;\n\n    return (\n        <Navigator handler={handleWeekNavigation}\n                   text={label}\n                   prevDisabled={calendarWeek === firstWeek}\n                   nextDisabled={calendarWeek === lastWeek}/>\n    )\n}\n\nexport default WeeklyNavigation;","// components\nimport CustomSelect from '@ui/Select';\n\n// hooks\nimport {useState} from 'react';\n\n// utils\nimport {getWeekArray} from '@utils/dates';\nimport moment from 'moment/moment';\n\nconst WeekSelector = ({date, setter}) =>{\n    const options = getWeekArray().map((item, i) => {\n        return {\n            value: i,\n            label: `${item.startLong} - ${item.endLong}`,\n        }\n    });\n\n    const [selected, setSelected] = useState(options[moment(date).week() - 1]);\n\n    const handleWeekChange = e => {\n        setSelected(e);\n        setter(moment(date).week(e.value + 1).startOf('week').toDate());\n    }\n\n    return <CustomSelect variant=\"basic\" options={options} value={selected} changeHandler={handleWeekChange}/>\n}\n\nexport default WeekSelector;","// components\nimport Navigator from '@ui/Navigator';\n\n// utils\nimport moment from 'moment/moment';\n\nconst MonthlyNavigation = ({date, setter}) => {\n    const calendarMonth = moment(date).month();\n    const currentMonth = moment().month();\n\n    const handleMonthNavigation = e => {\n        if (e.currentTarget.dataset.direction === 'prev') {\n            setter(moment(date).subtract(1, 'month').toDate());\n        } else {\n            setter(moment(date).add(1, 'month').toDate());\n        }\n    }\n\n    let label;\n    if (currentMonth === calendarMonth) label = 'This month';\n    else if (currentMonth + 1 === calendarMonth) label = 'Next month';\n    else if (currentMonth - 1 === calendarMonth) label = 'Last month';\n    else label = `${moment(date).format('MMMM')}`;\n\n    return (\n        <Navigator handler={handleMonthNavigation}\n                   text={label}\n                   prevDisabled={calendarMonth === 0}\n                   nextDisabled={calendarMonth === 11}/>\n    )\n}\n\nexport default MonthlyNavigation;","// components\nimport CustomSelect from '@ui/Select';\n\n// hooks\nimport {useState} from 'react';\n\n// utils\nimport {getMonthArray} from '@utils/dates';\nimport moment from 'moment/moment';\n\nconst MonthSelector = ({date, setter}) => {\n    const options = getMonthArray().map(item => {\n        return {\n            value: item.month,\n            label: item.formatted\n        }\n    });\n\n    const [selected, setSelected] = useState(options[moment(date).month()]);\n\n    const handleMonthChange = e => {\n        setSelected(e);\n        const month =  moment(e.value).month();\n        setter(moment(date).set({month: month, date: 1}));\n    }\n\n    return <CustomSelect variant=\"basic\" options={options} value={selected} changeHandler={handleMonthChange}/>\n}\n\nexport default MonthSelector;","import moment from 'moment';\n\nexport const disabled = [\n    {\n        start: moment().set({ hour: 12, minute: 30, second: 0 }).toDate(),\n        end: moment().set({ hour: 13, minute: 0, second: 0 }).toDate(),\n        type: 'disabled'\n    },\n\n];\n\nexport const events = {\n    doctor: [\n        {\n            name: 'MRI',\n            start: moment().set({ hour: 9, minute: 30, second: 0 }).toDate(),\n            end: moment().set({ hour: 10, minute: 0, second: 0 }).toDate(),\n            allDay: false,\n            type: 'test'\n        },\n\n    ],\n    patient: {\n        general: [\n            {\n                name: '3:00 PM  Patient Nagar',\n                start: moment().set({ hour: 10, minute: 0, second: 0 }).toDate(),\n                end: moment().set({ hour: 10, minute: 30, second: 0 }).toDate(),\n                allDay: false,\n                type: 'test'\n            }\n\n\n        ],\n        disabled: disabled\n    }\n}","// styles\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\n\n// styled components\nimport { Container, Header, StyledCalendar, Footer } from './style';\nimport { Container as Tabs, Item, Button } from '@ui/TabNav/style';\n\n// components\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport Event from '@components/AppointmentsCalendar/Event';\nimport TimeSlot from '@components/AppointmentsCalendar/TimeSlot';\nimport DailyToolbar from '@components/AppointmentsCalendar/DailyToolbar';\nimport DailyNavigation from '@components/AppointmentsCalendar/DailyNavigation';\nimport WeeklyNavigation from '@components/AppointmentsCalendar/WeeklyNavigation';\nimport WeekSelector from '@components/AppointmentsCalendar/WeekSelector';\nimport MonthlyNavigation from '@components/AppointmentsCalendar/MonthlyNavigation';\nimport MonthSelector from '@components/AppointmentsCalendar/MonthSelector';\nimport Legend from '@ui/Legend';\nimport LegendItem from '@ui/Legend/LegendItem';\nimport DoctorPopup from '@components/AppointmentsCalendar/DoctorPopup';\n\n// utils\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { colorTypes } from '@constants/colors';\nimport { doctorsOptions } from '@constants/options';\n\n// hooks\nimport { useState, useRef, useEffect } from 'react';\nimport useWindowSize from '@hooks/useWindowSize';\n\n// data placeholder\nimport { events, disabled } from '@db/calendar_appointments';\nimport CustomSelect from '@ui/Select';\nimport { GetAppointmtentREwie } from '@components/Api/AllApi';\n\nconst AppointmentsCalendar = ({ viewChangeHandler, current, type }) => {\n    const width = useWindowSize().width;\n    const localizer = momentLocalizer(moment);\n\n    const footerRef = useRef(null);\n    const headerRef = useRef(null);\n    const [height, setHeight] = useState(0);\n\n    useEffect(() => {\n        setHeight(headerRef.current.offsetHeight + footerRef.current.offsetHeight);\n    }, [headerRef, footerRef]);\n\n    const options = doctorsOptions();\n    const [selectedDoctor, setSelectedDoctor] = useState(options[0]);\n\n    const [popupOpen, setPopupOpen] = useState(false);\n\n    const [post, setPost] = useState(false)\n\n    useEffect(() => {\n\n        const AppShed = GetAppointmtentREwie();\n        if (AppShed) {\n            AppShed.then((data) => {\n                console.log(data, \"App ShedulerA\")\n                setPost(data?.result, \"App ShedulerA\")\n            })\n        }\n\n\n    }, [])\n\n\n    const getDayFormat = () => {\n        switch (true) {\n            case width < 768:\n                return 'D';\n            case width < 1600:\n                return 'ddd, D';\n            default:\n                return 'dddd D MMMM';\n        }\n    }\n\n    const [currentDate, setCurrentDate] = useState(moment().toDate());\n    const views = ['month', 'week', 'day'];\n    const Navigation = () => {\n        return (\n            <Tabs className=\"tabs\">\n                {\n                    views.map(view => {\n                        return (\n                            <Item key={view}>\n                                <Button className={current === view ? 'active' : null}\n                                    onClick={() => viewChangeHandler(view)}>\n                                    {view}\n                                </Button>\n                            </Item>\n                        )\n                    })\n                }\n            </Tabs>\n        )\n    }\n\n    const handleNavigation = (action, date) => {\n        switch (action) {\n            case 'NEXT':\n                setCurrentDate(moment(currentDate).add(1, 'day').toDate());\n                break;\n            case 'PREV':\n                setCurrentDate(moment(currentDate).subtract(1, 'day').toDate());\n                break;\n            default:\n                setCurrentDate(date);\n        }\n    }\n\n    const handleDayClick = (date) => {\n        setCurrentDate(date);\n        viewChangeHandler('day');\n    }\n\n    const config = {\n        as: Calendar,\n        localizer: localizer,\n        startAccessor: 'start',\n        endAccessor: 'end',\n        views: views,\n        view: current,\n        date: currentDate,\n        onView: viewChangeHandler,\n        onNavigate: handleNavigation,\n        onDrillDown: (date) => handleDayClick(date),\n        events: type === 'doctor' ? events['doctor'] : current === 'day' ? events['patient'].general : events['patient'].disabled,\n        backgroundEvents: type === 'doctor' ? disabled : [],\n        min: moment().startOf('year').set({ hour: 9, minute: 30 }).toDate(),\n        max: moment().endOf('year').set({ hour: 16, minute: 30 }).toDate(),\n        timeslots: 1,\n        step: 30,\n        formats: {\n            dayHeaderFormat: width < 414 ? 'dddd, MMM DD' : 'dddd, MMMM DD',\n            dayFormat: getDayFormat(),\n            timeGutterFormat: 'HH:mm',\n        },\n        components: {\n            toolbar: ({ label, date }) =>\n                <Header ref={headerRef} view={current}>\n                    {current === 'day' &&\n                        <DailyToolbar label={type === 'doctor' ? label : 'Daily appointments scheduler'} />}\n                    <Navigation />\n                    {current === 'day' && <DailyNavigation onNavigate={handleNavigation} date={date} label={label} />}\n                    {current === 'week' && (\n                        <>\n\n                            <WeekSelector date={date} setter={setCurrentDate} />\n                            {/* <DocSelect /> */}\n                            <WeeklyNavigation date={date} setter={setCurrentDate} />\n                        </>\n                    )}\n                    {current === 'month' && (\n                        <>\n                            <MonthSelector date={date} setter={setCurrentDate} />\n                            <MonthlyNavigation date={date} setter={setCurrentDate} />\n                        </>\n                    )}\n                </Header>,\n            event: ({ event }) => <Event event={event} variant={current} />,\n            timeSlotWrapper: (props) => TimeSlot(props, 30, 1, true),\n        },\n        className: `calendar-${current} calendar-${type}`,\n        messages: {\n            showMore: (total) => `+ ${total}`,\n        },\n        popup: true,\n        selectable: type === 'patient' && current !== 'day',\n        onSelectSlot: type === 'patient' && current !== 'day' && (() => setPopupOpen(true))\n    }\n\n    return (\n        <>\n            <Container>\n                <StyledCalendar {...config} />\n                {\n                    type === 'patient' && current !== 'day' &&\n                    <DoctorPopup elemsHeight={height} name={selectedDoctor.label || null} open={popupOpen}\n                        handler={setPopupOpen} />\n                }\n            </Container>\n            <Footer ref={footerRef}>\n                <Legend>\n                    {\n                        colorTypes.map(({ cat, color, label }) => {\n                            return (\n                                <LegendItem key={cat} color={color} legend={label} />\n                            )\n                        })\n                    }\n                </Legend>\n            </Footer>\n        </>\n    )\n}\n\nAppointmentsCalendar.propTypes = {\n    type: PropTypes.oneOf(['doctor', 'patient']).isRequired,\n}\n\nexport default AppointmentsCalendar;","import {doctors} from '@db/doctors';\nimport Avatar from '@ui/Avatar';\n\nexport const tasksOptions = [\n    {value: 'work', label: 'Work'},\n    {value: 'travel', label: 'Travel'},\n    {value: 'family', label: 'Family'},\n    {value: 'other', label: 'Other'}\n]\n\nexport const depsOptions = [\n    {value: 'all', label: 'All Departments'},\n    {value: 'family', label: 'Family Doctors'},\n    {value: 'therapy', label: 'Therapists'},\n    {value: 'dent', label: 'Dentists'},\n    {value: 'cardio', label: 'Cardiologists'},\n]\n\nexport const testsOptions = [\n    {value: 'all', label: 'All My Tests'},\n    {value: 'blood', label: 'Blood Count'},\n    {value: 'xray', label: 'X-Ray'},\n    {value: 'ecg', label: 'ECG'},\n    {value: 'ct', label: 'CT Scan'},\n    {value: 'mri', label: 'MRI'},\n    {value: 'ultrasound', label: 'Ultrasound'},\n    {value: 'prenatal', label: 'Prenatal Testing'},\n]\n\nexport const doctorsOptions = () => {\n    let options = [];\n    doctors.forEach(doctor => {\n        options.push({\n            value: doctor.id,\n            label: <div className=\"user-option\">\n                <Avatar avatar={doctor.avatar} alt={doctor.name} size={40} />\n                <span>{doctor.name}</span>\n            </div>\n        });\n    });\n    return options;\n}","// components\nimport Page from '@layout/Page';\nimport DoctorCalendar from '@widgets/DoctorCalendar';\nimport PatientCalendar from '@widgets/PatientCalendar';\n\n// utils\nimport { useState } from 'react';\n\nconst PatientAppointments = () => {\n    const [currentView, setView] = useState('day');\n\n    let pageTitle = '';\n    switch (currentView) {\n        case 'week':\n            pageTitle = 'Available Appointments Time';\n            break;\n        case 'month':\n            pageTitle = 'Appointments Schedule';\n            break;\n        default:\n            pageTitle = 'Your appointments';\n            break;\n    }\n\n    return (\n        <Page title={pageTitle} hasBadge={currentView === 'day'} qty={2}>\n            <DoctorCalendar current={currentView} handler={setView} />\n        </Page>\n    )\n}\n\nexport default PatientAppointments;","export function numFormatter(num) {\n    if (num > 999 && num < 1000000) {\n        return (num / 1000).toFixed(1) + 'k';\n    } else if (num > 1000000) {\n        return (num / 1000000).toFixed(1) + 'm';\n    } else if (num < 900) {\n        return num;\n    }\n}\n\nexport function addZero(num) {\n    return num < 10 ? '0' + num : num;\n}","// components\nimport Widget from '@components/Widget';\nimport AppointmentsCalendar from '@components/AppointmentsCalendar';\n\nconst DoctorCalendar = ({handler, current}) => {\n    return (\n        <Widget name=\"DoctorCalendar\">\n            <AppointmentsCalendar current={current} viewChangeHandler={handler} type=\"doctor\"/>\n        </Widget>\n    )\n}\n\nexport default DoctorCalendar;"],"names":["props","step","day","isRender","differenceMs","moment","value","isCurrentTimeSlot","hours","Date","getHours","minutes","getMinutes","currentTime","addZero","timeIndicator","className","children","_jsx","style","top","concat","indicatorPosition","minutesFromProps","Math","abs","calculateIndicatorPosition","cloneElement","_objectSpread","format","_ref","label","_Fragment","date","setter","calendarWeek","week","currentWeek","firstWeek","startOf","lastWeek","endOf","Navigator","handler","e","currentTarget","dataset","direction","subtract","toDate","add","text","prevDisabled","nextDisabled","options","getWeekArray","map","item","i","startLong","endLong","_useState","useState","_useState2","_slicedToArray","selected","setSelected","CustomSelect","variant","changeHandler","calendarMonth","month","currentMonth","getMonthArray","formatted","set","disabled","start","hour","minute","second","end","type","events","doctor","name","allDay","patient","general","viewChangeHandler","current","width","useWindowSize","localizer","momentLocalizer","footerRef","useRef","headerRef","height","setHeight","useEffect","offsetHeight","doctorsOptions","_useState3","_useState4","selectedDoctor","_useState5","_useState6","popupOpen","setPopupOpen","_useState7","_useState8","setPost","AppShed","GetAppointmtentREwie","then","data","console","log","result","_useState9","_useState10","currentDate","setCurrentDate","views","Navigation","Tabs","view","Item","Button","onClick","handleNavigation","action","config","as","Calendar","startAccessor","endAccessor","onView","onNavigate","onDrillDown","handleDayClick","backgroundEvents","min","max","timeslots","formats","dayHeaderFormat","dayFormat","getDayFormat","timeGutterFormat","components","toolbar","_ref2","_jsxs","Header","ref","DailyToolbar","DailyNavigation","WeekSelector","WeeklyNavigation","MonthSelector","MonthlyNavigation","event","_ref3","Event","timeSlotWrapper","TimeSlot","messages","showMore","total","popup","selectable","onSelectSlot","Container","StyledCalendar","DoctorPopup","elemsHeight","open","Footer","Legend","colorTypes","_ref4","cat","color","LegendItem","legend","tasksOptions","depsOptions","testsOptions","doctors","forEach","push","id","Avatar","avatar","alt","size","currentView","setView","pageTitle","Page","title","hasBadge","qty","DoctorCalendar","numFormatter","num","toFixed","Widget","AppointmentsCalendar"],"sourceRoot":""}